// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Project208.Domain.Concrete;
using System;

namespace Project208.Domain.Migrations
{
    [DbContext(typeof(EFDbContext))]
    partial class EFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project208.Domain.Entities.ContractStatus", b =>
                {
                    b.Property<int>("ContractStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status");

                    b.Property<string>("Vnese");

                    b.HasKey("ContractStatusID");

                    b.ToTable("ContractStatuses");
                });

            modelBuilder.Entity("Project208.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Project208.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Project208.Domain.Entities.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Project208.Domain.Entities.SlowlyReturnType", b =>
                {
                    b.Property<int>("SlowlyReturnTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypeDescription");

                    b.HasKey("SlowlyReturnTypeId");

                    b.ToTable("SlowlyReturnTypes");
                });

            modelBuilder.Entity("Project208.Domain.Entities.T1Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActualLendMoney");

                    b.Property<int>("Amount");

                    b.Property<int>("AmountPerDay");

                    b.Property<DateTime>("BorrowDate");

                    b.Property<DateTime?>("CheckoutDate");

                    b.Property<string>("ContractNote");

                    b.Property<int>("ContractStatusId");

                    b.Property<int>("CustomerId");

                    b.Property<int>("Interest");

                    b.Property<string>("Items");

                    b.Property<DateTime?>("LastReturnDate");

                    b.Property<DateTime?>("RenewDate");

                    b.Property<int?>("RenewFrom");

                    b.Property<int?>("RenewTo");

                    b.Property<int?>("SlowlyReturnAmountPerDay");

                    b.Property<DateTime?>("SlowlyReturnStartDate");

                    b.Property<int>("TotalDays");

                    b.Property<int>("TotalLeft");

                    b.Property<DateTime?>("UnableToPayStartDate");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("CustomerId");

                    b.ToTable("T1Contracts");
                });

            modelBuilder.Entity("Project208.Domain.Entities.T1PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualPayDate");

                    b.Property<int>("Amount");

                    b.Property<int>("ContractId");

                    b.Property<int>("ExtraMoney");

                    b.Property<DateTime?>("NeedToPayDate");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("ContractId");

                    b.ToTable("T1PaymentDetails");
                });

            modelBuilder.Entity("Project208.Domain.Entities.T2Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActualLendMoney");

                    b.Property<int>("Amount");

                    b.Property<int>("AmountPerPeriod");

                    b.Property<DateTime>("BorrowDate");

                    b.Property<DateTime?>("CheckoutDate");

                    b.Property<string>("ContractNote");

                    b.Property<int>("ContractStatusId");

                    b.Property<int>("CustomerId");

                    b.Property<int>("InterestRate");

                    b.Property<string>("Items");

                    b.Property<int>("Period");

                    b.Property<int?>("ReturnAfterCheckout");

                    b.Property<DateTime?>("SlowlyReturnDate");

                    b.Property<DateTime?>("SlowlyReturnStartDate");

                    b.Property<int>("SlowlyReturnTypeId");

                    b.Property<int>("TotalLeft");

                    b.Property<DateTime?>("UnableToPayStartDate");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SlowlyReturnTypeId");

                    b.ToTable("T2Contracts");
                });

            modelBuilder.Entity("Project208.Domain.Entities.T2PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualPayDate");

                    b.Property<int>("Amount");

                    b.Property<int>("ContractID");

                    b.Property<int>("ExtraMoney");

                    b.Property<DateTime?>("NeedToPayDate");

                    b.HasKey("PaymentDetailID");

                    b.HasIndex("ContractID");

                    b.ToTable("T2PaymentDetails");
                });

            modelBuilder.Entity("Project208.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Project208.Domain.Entities.Location", "Location")
                        .WithMany("Customers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project208.Domain.Entities.T1Contract", b =>
                {
                    b.HasOne("Project208.Domain.Entities.ContractStatus", "ContractStatus")
                        .WithMany("T1Contracts")
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project208.Domain.Entities.Customer", "Customer")
                        .WithMany("T1Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project208.Domain.Entities.T1PaymentDetail", b =>
                {
                    b.HasOne("Project208.Domain.Entities.T1Contract", "T1Contract")
                        .WithMany("T1PaymentDetails")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project208.Domain.Entities.T2Contract", b =>
                {
                    b.HasOne("Project208.Domain.Entities.ContractStatus", "ContractStatus")
                        .WithMany("T2Contracts")
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project208.Domain.Entities.Customer", "Customer")
                        .WithMany("T2Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project208.Domain.Entities.SlowlyReturnType", "SlowlyReturnType")
                        .WithMany("T2Contracts")
                        .HasForeignKey("SlowlyReturnTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project208.Domain.Entities.T2PaymentDetail", b =>
                {
                    b.HasOne("Project208.Domain.Entities.T2Contract", "ContractType2")
                        .WithMany("T2PaymentDetails")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
